import React, { useState, useCallback, DragEvent, useRef } from 'react';
import { FileIcon, UploadIcon, CheckCircleIcon, XCircleIcon } from './Icons';
import type { Snapshot, SnapshotData, SnapshotFile, SnapshotFileCategory } from '../types';
import { SNAPSHOT_CATEGORIES } from '../types';

interface SnapshotPanelProps {
    title: string;
    onSnapshotReady: (snapshot: Snapshot) => void;
}

export const SnapshotPanel: React.FC<SnapshotPanelProps> = ({ title, onSnapshotReady }) => {
    const [snapshotData, setSnapshotData] = useState<SnapshotData>({});
    const [fileName, setFileName] = useState<string | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [isDragActive, setIsDragActive] = useState(false);
    const inputRef = useRef<HTMLInputElement>(null);

    const processFile = (file: File | null) => {
        if (!file) {
            return;
        }

        if (!file.name.endsWith('.tracerfile') && file.type !== 'text/plain' && !file.name.endsWith('.txt')) {
            setError("Invalid file type. Please upload a '.tracerfile' or '.txt' file.");
            return;
        }
        setError(null);
        setSnapshotData({});
        setFileName(null);

        const reader = new FileReader();
        reader.onerror = () => setError(`Error reading file ${file.name}`);
        reader.onload = () => {
            const fileContent = reader.result as string;
            const newSnapshotData: SnapshotData = {};

            const sectionRegex = /--- WINTRACER_SECTION: (\w+) ---\s*([\s\S]*?)(?=--- WINTRACER_SECTION:|$)/g;
            
            let match;
            while ((match = sectionRegex.exec(fileContent)) !== null) {
                const category = match[1].toLowerCase() as SnapshotFileCategory;
                const content = match[2].trim();

                if (Object.keys(SNAPSHOT_CATEGORIES).includes(category)) {
                    newSnapshotData[category] = {
                        name: `${category}.txt`,
                        content: content,
                    };
                }
            }
            
            if (Object.keys(newSnapshotData).length === 0) {
                setError("The file does not contain valid snapshot sections. Please use a file generated by the scripts.");
                return;
            }

            setFileName(file.name);
            setSnapshotData(newSnapshotData);
            
            const newSnapshot: Snapshot = {
                id: title.replace(/\s+/g, '-').toLowerCase(),
                name: title,
                createdAt: new Date(),
                data: newSnapshotData
            };
            onSnapshotReady(newSnapshot);
        };
        reader.readAsText(file);
    };

    const handleDrop = useCallback((e: DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragActive(false);
        processFile(e.dataTransfer.files?.[0] ?? null);
    }, [onSnapshotReady, title]);

    const handleDrag = useCallback((e: DragEvent<HTMLDivElement>) => {
        e.preventDefault();
        e.stopPropagation();
        if (e.type === "dragenter" || e.type === "dragover") {
            setIsDragActive(true);
        } else if (e.type === "dragleave") {
            setIsDragActive(false);
        }
    }, []);

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        processFile(e.target.files?.[0] ?? null);
    };

    const onButtonClick = () => {
        inputRef.current?.click();
    };

    const foundCategories = Object.keys(snapshotData) as SnapshotFileCategory[];

    return (
        <div className="border border-neutral-800 p-6 w-full">
            <h3 className="text-lg font-semibold mb-4 text-center title-font text-neutral-300">{title}</h3>
            <div
                onDragEnter={handleDrag}
                onDragLeave={handleDrag}
                onDragOver={handleDrag}
                onDrop={handleDrop}
                onClick={onButtonClick}
                className={`border-2 border-dashed p-8 text-center cursor-pointer transition-colors
                    ${isDragActive ? 'border-neutral-500 bg-neutral-900' : 'border-neutral-700 hover:border-neutral-600'}`}
            >
                <input ref={inputRef} type="file" className="hidden" onChange={handleFileChange} accept=".tracerfile,.txt,text/plain" />
                <div className="flex flex-col items-center">
                    <UploadIcon className="w-10 h-10 text-neutral-600 mb-3" />
                    {isDragActive ? (
                        <p className="text-neutral-400 mono-font">Drop your file here</p>
                    ) : (
                        <p className="text-neutral-500 mono-font text-sm">Drag & drop a '.tracerfile' or click</p>
                    )}
                </div>
            </div>

            {error && <p className="text-red-400 mt-4 text-sm mono-font flex items-center"><XCircleIcon className="w-4 h-4 mr-2 shrink-0"/>{error}</p>}
            
            {foundCategories.length > 0 && fileName && (
                <div className="mt-6">
                    <h4 className="font-semibold text-neutral-400 mb-2 flex items-center title-font text-sm">
                        <CheckCircleIcon className="w-5 h-5 text-green-600 mr-2" />
                        {fileName}
                    </h4>
                    <p className="text-xs text-neutral-600 mb-2 mono-font">Found {foundCategories.length} categories:</p>
                    <ul className="grid grid-cols-2 gap-x-4 gap-y-1 text-sm text-neutral-500 mono-font">
                        {foundCategories.map(category => (
                            <li key={category} className="flex items-center truncate">
                                <FileIcon className="w-4 h-4 mr-2 text-neutral-600 shrink-0" />
                                <span className="truncate">{SNAPSHOT_CATEGORIES[category]}</span>
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};
