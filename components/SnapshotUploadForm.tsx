import React, { useState } from 'react';
import type { Snapshot, SnapshotFileCategory, SnapshotData } from '../types';
import { SNAPSHOT_CATEGORIES } from '../types';

interface SnapshotUploadFormProps {
  onAddSnapshot: (snapshot: Snapshot) => void;
  onCancel: () => void;
}

const parseTracerFile = (content: string): SnapshotData => {
    const data: SnapshotData = {};
    const separator = /---WINTRACER_AI_SEPARATOR:(\w+)---/g;
    
    // The split will produce an array like:
    // ["", "files", "<files content>", "registry", "<registry content>", ...]
    const parts = content.split(separator);
    
    if (parts.length > 1) {
        for (let i = 1; i < parts.length; i += 2) {
            const category = parts[i] as SnapshotFileCategory;
            const categoryContent = parts[i+1]?.trim() ?? '';
            
            if (category in SNAPSHOT_CATEGORIES) {
                data[category] = {
                    name: `${category}.log`, // Internal name
                    content: categoryContent,
                };
            }
        }
    }
    
    return data;
};

const SnapshotUploadForm: React.FC<SnapshotUploadFormProps> = ({ onAddSnapshot, onCancel }) => {
  const [snapshotName, setSnapshotName] = useState('');
  const [snapshotData, setSnapshotData] = useState<SnapshotData | null>(null);
  const [fileName, setFileName] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setError(null);
      setFileName(file.name);
      const reader = new FileReader();
      reader.onload = (e) => {
        const content = e.target?.result as string;
        const parsedData = parseTracerFile(content);
        if (Object.keys(parsedData).length === 0) {
            setError("Invalid file. Please upload a .tracerfile generated by the scripts.");
            setSnapshotData(null);
            setFileName(null);
        } else {
            setSnapshotData(parsedData);
        }
      };
      reader.onerror = () => {
        setError("Failed to read the file.");
        setSnapshotData(null);
        setFileName(null);
      }
      reader.readAsText(file);
    }
  };

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    if (!snapshotName.trim()) {
      alert("Please enter a name for the snapshot.");
      return;
    }
    if (!snapshotData) {
        alert("Please upload a valid .tracerfile.");
        return;
    }
    const newSnapshot: Snapshot = {
      id: crypto.randomUUID(),
      name: snapshotName.trim(),
      createdAt: new Date(),
      data: snapshotData,
    };
    onAddSnapshot(newSnapshot);
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 sm:p-6 lg:p-8 space-y-8">
      <div>
        <h2 className="text-2xl font-bold text-white">Create New Snapshot</h2>
        <p className="text-gray-400 mt-1">Provide a name and upload the <code>.tracerfile</code> generated by the script.</p>
      </div>

      <div>
        <label htmlFor="snapshot-name" className="block text-sm font-medium text-gray-300">Snapshot Name</label>
        <input
          type="text"
          id="snapshot-name"
          value={snapshotName}
          onChange={(e) => setSnapshotName(e.target.value)}
          placeholder={`e.g., "Before installing NodeJS"`}
          className="mt-1 block w-full bg-gray-900 border border-gray-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-cyan-500 focus:border-cyan-500 sm:text-sm text-gray-100"
          required
        />
      </div>

       <div>
          <label className="block text-sm font-medium text-gray-300 mb-1">Snapshot File</label>
          <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-600 border-dashed rounded-md">
            <div className="space-y-1 text-center">
              <svg className="mx-auto h-12 w-12 text-gray-500" stroke="currentColor" fill="none" viewBox="0 0 48 48" aria-hidden="true"><path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"></path></svg>
              <div className="flex text-sm text-gray-500">
                <label htmlFor="file-upload" className="relative cursor-pointer bg-gray-800 rounded-md font-medium text-cyan-400 hover:text-cyan-300 focus-within:outline-none focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-offset-gray-900 focus-within:ring-cyan-500 px-1">
                  <span>Upload a file</span>
                  <input id="file-upload" name="file-upload" type="file" className="sr-only" onChange={handleFileChange} accept=".tracerfile" />
                </label>
                <p className="pl-1">or drag and drop</p>
              </div>
               {fileName && !error && <p className="text-xs text-green-400">{fileName}</p>}
               {!fileName && !error && <p className="text-xs text-gray-500">.tracerfile</p>}
               {error && <p className="text-xs text-red-400">{error}</p>}
            </div>
          </div>
      </div>


      <div className="pt-5 flex justify-end space-x-3">
        <button type="button" onClick={onCancel} className="bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200">
          Cancel
        </button>
        <button type="submit" className="bg-cyan-600 hover:bg-cyan-500 text-white font-semibold py-2 px-4 rounded-lg transition-colors duration-200" disabled={!snapshotData || !snapshotName}>
          Save Snapshot
        </button>
      </div>
    </form>
  );
};

export default SnapshotUploadForm;
